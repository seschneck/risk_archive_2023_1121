---
title: "eda_text"
format: html
---

```{r}
library(tidyverse)
library(tidytext)
library(wordcloud2)
library(RColorBrewer)

switch (Sys.info()[['sysname']],
        # PC paths
        Windows = {
          path_shared = "P:/studydata/risk/data_processed/shared"},

        # IOS paths
        Darwin = {
          path_shared = "/Volumes/private/studydata/risk/data_processed/shared"},
        
        # Linux paths
        Linux = {
          path_shared = "~/mnt/private/studydata/risk/data_processed/shared"}
        )
```

```{r}
d_raw <- read_csv(file.path(path_shared, "sms_android.csv"),
                        col_type = cols()) |> 
  glimpse()
```

# Exploratory Analysis using word count

```{r}
d_graph <- d_raw |>
  drop_na(body) |>
  subset(type %in% c("inbox", "sent")) |>
  unnest_tokens(word, body) |>
  anti_join(stop_words) |>
  count(type, word, sort = TRUE) |>
  group_by(type) |>
  mutate(proportion = n / sum(n))

d_graph |>
  slice_max(proportion, n = 15) |>
  ungroup() |>
  ggplot(aes(proportion, fct_reorder(word, proportion), fill = type)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~type, ncol = 2)
```

```{r}
library(scales)

d_graph |>
  pivot_wider(id_cols = word, names_from = type, values_from = proportion) |>
  ggplot(aes(x = inbox, y = sent, color = abs(inbox - sent))) +
  geom_abline(color = "gray40", lty = 2) +
  geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
  geom_text(aes(label = word), check_overlap = TRUE) +
  scale_x_log10(labels = percent_format()) +
  scale_y_log10(labels = percent_format()) +
  scale_color_gradient(limits = c(0, 0.001), 
                       low = "darkslategray4", high = "gray75") +
  theme(legend.position =)
```

```{r}
library(wordcloud2)
library(RColorBrewer)

data.frame(word = d_graph[d_graph$type=="inbox", ]$word[1:100], 
           freq = d_graph[d_graph$type=="inbox", ]$n[1:100]) |>
  wordcloud2(color = "random-dark", size = 0.4, ellipticity = 0.9)

data.frame(word = d_graph[d_graph$type=="sent", ]$word[1:100], 
           freq = d_graph[d_graph$type=="sent", ]$n[1:100]) |>
  wordcloud2(color = "random-dark", size = 0.4, ellipticity=0.9)
```

# Sentiment Analysis with tidy data

```{r}
# d_graph |>
#   inner_join(get_sentiments("bing")) |>
#   ggplot(aes(word, sentiment, fill = type)) +
#   geom_col(show.legend = FALSE, size = .0001) +
#   facet_wrap(~type, ncol = 2)

sent_graph <- function(d_graph, dictionary){
  d_sentiment <- d_graph |>
  inner_join(get_sentiments(dictionary))
  
  if (dictionary == "afinn"){
    d_sentiment$sentiment[d_sentiment$value < 0] <- -1
    d_sentiment$sentiment[d_sentiment$value > 0] <- 1
  }
  else {
    d_sentiment$sentiment <- recode(d_sentiment$sentiment, "positive" = 1, "negative" = -1)
  }
  
  d_sentiment |>
  ggplot(aes(word, sentiment, fill = type)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~type, ncol = 2)
}

sent_graph(d_graph, "bing")
sent_graph(d_graph, "nrc")
sent_graph(d_graph, "afinn")
```

```{r}
d_sent <- d_graph |>
  inner_join(get_sentiments("bing"))
d_sent$sentiment <- recode(d_sent$sentiment, "positive" = "green", "negative" = "red")

data.frame(word = d_sent[d_sent$type=="inbox", ]$word[1:100], 
           freq = d_sent[d_sent$type=="inbox", ]$n[1:100]) |>
  wordcloud2(color = d_sent[d_sent$type=="inbox", ]$sentiment[1:100])

data.frame(word = d_sent[d_sent$type=="sent", ]$word[1:100], 
           freq = d_sent[d_sent$type=="sent", ]$n[1:100]) |>
  wordcloud2(color = d_sent[d_sent$type=="sent", ]$sentiment[1:100])
```

# Word and Document Frequency: tf-idf

```{r}
d_tfidf <- d_graph |>
  group_by(type) |>
  mutate(rank = row_number()) |>
  ungroup() |>
  rename_at("proportion", ~"tf")

attributes(lm(log10(tf) ~ log10(rank), data = d_tfidf))
summary(lm(log10(tf) ~ log10(rank), data = d_tfidf))$coefficients
summary(lm(log10(tf) ~ log10(rank), data = d_tfidf))$coefficients[2, 1]

d_tfidf |>
  ggplot(aes(rank, tf, color = type)) +
  geom_abline(intercept = summary(lm(log10(tf) ~ log10(rank), data = d_tfidf))$coefficients[1, 1],
              slope = summary(lm(log10(tf) ~ log10(rank), data = d_tfidf))$coefficients[2, 1],
              color = "gray50",
              linetype = 2) +
  geom_line(size = 1.1, alpha = .8) +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = NULL, y = "term frequency")
```

```{r}
d_tfidf |>
  bind_tf_idf(word, type, n) |>
  arrange(desc(tf_idf)) |>
  group_by(type) |>
  slice_max(tf_idf, n = 15) |>
  ungroup() |>
  ggplot(aes(tf_idf, fct_reorder(word, tf_idf), fill = type)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~type, ncol = 2, scales = "free") +
  labs(x = "tf-idf", y = NULL)
```

# Relationships between words: n-grams and correlations

```{r}
d_n_gram <- d_raw |>
  drop_na(body) |>
  subset(type %in% c("inbox", "sent")) |>
  unnest_tokens(bigram, body, token = "ngrams", n = 2) |>
  filter(!is.na(bigram)) |>
  count(type, bigram, sort = TRUE) |>
  separate(bigram, c("word1", "word2")) |>
  filter(!word1 %in% stop_words$word) |>
  filter(!word2 %in% stop_words$word) |>
  unite(bigram, word1, word2, sep = " ")
```

```{r}
# tf_idf very identical
d_n_gram <- d_n_gram |>
  count(type, bigram) |>
  bind_tf_idf(bigram, type, n) |>
  arrange(desc(tf_idf))

d_n_gram |> 
  group_by(type) |>
  slice_max(tf_idf, n = 15) |>
  ungroup() |>
  ggplot(aes(tf_idf, fct_reorder(bigram, tf_idf), fill = type)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~type, ncol = 2, scales = "free")

summary(d_n_gram$tf_idf)
```

