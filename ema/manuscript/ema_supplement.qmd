---
title: "Supplemental Materials"
format: pdf
csl: https://raw.githubusercontent.com/jjcurtin/lab_support/main/rmd_templates/csl/elsevier-vancouver.csl
geometry: margin=.5in
fontsize: 11pt
bibliography: paper_ema.bib
editor_options: 
  chunk_output_type: console
execute:
  echo: false
  warning: false
  message: false
  output: false
---


```{r knitr_settings}
# settings
options(knitr.kable.NA = '')
knitr::opts_chunk$set(fig.pos = "ht", out.extra = "")
options(scipen = 999) #removes scientific notation
```

```{r setup, include = FALSE}
library(knitr)
# library(yardstick) # for roc_curve and pr_curve
library(kableExtra)
library(janitor)
# library(corx)
library(patchwork)
library(ggtext)
library(consort)
library(tidyverse)
library(tidymodels)
library(tidyposterior)
library(cowplot)

theme_set(theme_classic()) 
```

```{r paths}
switch (Sys.info()[['sysname']],
        # PC paths
        Windows = {
          path_input <- "P:/studydata/risk/chtc/ema"
          path_processed <- "P:/studydata/risk/data_processed/ema"
          path_models <- "P:/studydata/risk/models/ema"
          path_shared <- "P:/studydata/risk/data_processed/shared"},

        # IOS paths
        Darwin = {
          path_input <- "/Volumes/private/studydata/risk/chtc/ema"
          path_processed <- "/Volumes/private/studydata/risk/data_processed/ema"
          path_models <- "/Volumes/private/studydata/risk/models/ema"
          path_shared <- "/Volumes/private/studydata/risk/data_processed/shared"},
        
        # Linux paths
        Linux = {
          path_input <- "~/mnt/private/studydata/risk/chtc/ema"
          path_processed <- "~/mnt/private/studydata/risk/data_processed/ema"
          path_models <- "~/mnt/private/studydata/risk/models/ema"
          path_shared <- "~/mnt/private/studydata/risk/data_processed/shared"}
        )
```

```{r load_model_data}
# Table data
disposition <- read_csv(file.path(path_processed, "disposition.csv"), 
                        col_types = "ccDDcccccccccc")
screen <- read_csv(file.path(path_shared, "screen.csv"), 
                   col_types = cols()) |>
  filter(subid %in% subset(disposition, analysis == "yes")$subid)

lapses <- read_csv(file.path(path_shared, "lapses.csv"), col_types = cols()) |>
  filter(exclude == FALSE)

# Predictions data
preds_week<- read_rds(file.path(path_models, "outer_preds_1week_0_v5_nested.rds")) |> 
  select(outer_split_num, label, prob = prob_beta)
preds_day<- read_rds(file.path(path_models, "outer_preds_1day_0_v5_nested.rds")) |> 
  select(outer_split_num, label, prob = prob_beta)
preds_hour<- read_rds(file.path(path_models, "outer_preds_1hour_0_v5_nested.rds")) |> 
  select(outer_split_num, label, prob = prob_beta)

auc_week <- read_rds(file.path(path_models, "outer_metrics_1week_0_v5_nested.rds")) |> 
  select(outer_split_num, contains("auc"))
auc_day <- read_rds(file.path(path_models, "outer_metrics_1day_0_v5_nested.rds")) |> 
  select(outer_split_num, contains("auc"))
auc_hour <- read_rds(file.path(path_models, "outer_metrics_1hour_0_v5_nested.rds")) |> 
  select(outer_split_num, contains("auc"))

# posterior probabilities
pp <- read_rds(file.path(path_models, "posteriors_all_0_v5_nested.rds"))


# roc overall
roc_week_full <- preds_week |> 
  roc_curve(prob, truth = label)

roc_day_full <- preds_day |> 
  roc_curve(prob, truth = label)

roc_hour_full <- preds_hour |> 
  roc_curve(prob, truth = label)

# rocs per fold
roc_week <- preds_week |> 
  nest(.by = outer_split_num, .key = "preds") |> 
  mutate(roc = map(preds, \(preds) roc_curve(preds, prob,
                                             truth = label))) |> 
  mutate(model = "week")

roc_day <- preds_day |> 
  nest(.by = outer_split_num, .key = "preds") |> 
  mutate(roc = map(preds, \(preds) roc_curve(preds, prob,
                                             truth = label))) |> 
  mutate(model = "day")

roc_hour <- preds_hour |> 
  nest(.by = outer_split_num, .key = "preds") |> 
  mutate(roc = map(preds, \(preds) roc_curve(preds, prob,
                                             truth = label))) |> 
  mutate(model = "week")


# PR curves
pr_week <- preds_week |> 
  pr_curve(prob, truth = label) |>  
  mutate(model = "1week")

pr_day <- preds_day |> 
  pr_curve(prob, truth = label) |> 
  mutate(model = "1day")

pr_hour <- preds_hour|> 
  pr_curve(prob, truth = label) |> 
  mutate(model = "1hour")

pr_all <- pr_week |> 
  bind_rows(pr_day) |> 
  bind_rows(pr_hour)

# UPDATE - JJC
# Local and Global Grouped SHAPS
shap_local_week <- read_rds(file.path(path_models, "outer_shapsgrp_1week_0_v5_nested.rds")) 
shap_local_day <- read_rds(file.path(path_models, "outer_shapsgrp_1day_0_v5_nested.rds"))
shap_local_hour <- read_rds(file.path(path_models, "outer_shapsgrp_1hour_0_v5_nested.rds")) 

shap_global_week <- shap_local_week |> 
  group_by(variable_grp) |>
  summarize(mean_value = mean(abs(value)), .groups = "drop") |>
  arrange(mean_value) |> 
  mutate(model = "Week")
shap_global_day <- shap_local_day |>
  group_by(variable_grp) |> 
  summarize(mean_value = mean(abs(value)), .groups = "drop") |>
  arrange(mean_value) |> 
  mutate(model = "Day")
shap_global_hour <- shap_local_hour |> 
  group_by(variable_grp) |>
  summarize(mean_value = mean(abs(value)), .groups = "drop") |>
  arrange(mean_value) |> 
  mutate(model = "Hour")

shap_global_all <- shap_global_week |> 
  bind_rows(shap_global_day) |> 
  bind_rows(shap_global_hour) |> 
  mutate(model = factor(model, levels = c("Week", "Day", "Hour"))) |> 
  mutate(variable_grp = factor(variable_grp, levels = c("past use (EMA item)", 
                                          "craving (EMA item)", 
                                          "past risky situation (EMA item)", 
                                          "past stressful event (EMA item)", 
                                          "past pleasant event (EMA item)", 
                                          "valence (EMA item)", 
                                          "arousal (EMA item)", 
                                          "future risky situation (EMA item)", 
                                          "future stressful event (EMA item)", 
                                          "future efficacy (EMA item)",
                                          "lapse day (other)",
                                          "lapse hour (other)",
                                          "missing surveys (other)",
                                          "age (demographic)",
                                          "sex (demographic)",
                                          "race (demographic)",
                                          "marital (demographic)",
                                          "education (demographic)")))

# lapse labels
labels_week <- read_csv(file.path(path_processed, "labels_1week.csv"), col_types = cols())
labels_day <- read_csv(file.path(path_processed, "labels_1day.csv"), col_types = cols())
labels_hour <- read_csv(file.path(path_processed, "labels_1hour.csv"), col_types = cols())

# ema data
ema_m <- read_csv(file.path(path_shared, "ema_morning.csv"), col_types = cols()) |> 
  mutate(read_csv = with_tz(start_date, tzone = "America/Chicago"),
         subid = as.numeric(subid))
ema_l <- read_csv(file.path(path_shared, "ema_later.csv"), col_types = cols()) |> 
  mutate(start_date = with_tz(start_date, tzone = "America/Chicago"),
         subid = as.numeric(subid))

```




<!--***************************************************************************-->
<!-- Figure S1: Consort Diagram-->

```{r fig_consort, fig.height=7}
#| output: true
#| fig-cap: 
#|   - "Consort diagram depicting participant retention at each point of the study and reasons for not enrolling, discontinuation, and exclusion."

consort_plot(data = disposition,
             orders = c(eligible = "Eligible Sample",
                        consented_reason = "Not Consented",
                        consented = "Consented",
                        enrolled_reason = "Not Enrolled",
                        enrolled = "Enrolled",
                        completed_followup_reason = "Discontinued",
                        completed_followup = "Completed through Followup 1",
                        analysis_reason = "Excluded",
                        analysis = "Final Analysis"),
             side_box = c("consented_reason", 
                          "enrolled_reason", 
                          "completed_followup_reason",
                          "analysis_reason"),
             cex = .9,
             text_width = 45)
```


<!--***************************************************************************-->
<!-- Figure S2: Histogram of number of lapses per participant??--> 
<!-- or Kendra made these figures-->
<!-- JOHN: I created a histogram of number of lapses per participant in ana_lapses. You will see its a bit hard to depict since there are a few outliers that are extending the x-axis-->

<!-- Supp figure: mean lapse rates per subid and overall mean lapse rate per model -->

```{r fig_lapses_v1, fig.width = 7}
#| output: true
#| fig-cap: 
#|   - "Mean lapse rates per participant by model. Overall mean lapse rate is depicted by the dashed line. (version 1 with different x-axis scale)"

plot_week <- labels_week |> 
  mutate(window = "Week",
         window = factor(window),
         lapse = if_else(lapse == "no", 0, 1))  |> 
  group_by(window, subid) |> 
  summarise(lapse_mean = mean(lapse), .groups = "drop") |> 
  ggplot() +
  geom_histogram(mapping = aes(x = lapse_mean), fill = "#F8766D",
                 color = "black", alpha = .4, binwidth = .05, boundary = 0) +
  facet_wrap(~window) +
  xlab("Lapse Rate") +
  ylab("Count") +
  scale_x_continuous(breaks = seq(0, 1, .2)) +
  scale_y_continuous(limits = c(0, 150)) +
  geom_vline(aes(xintercept = lapse_mean), labels_week |> 
    group_by(subid) |> 
    mutate(lapse = if_else(lapse == "no", 0, 1)) |> 
    summarise(lapse_mean = mean(lapse), .groups = "drop_last") |> 
    summarise(lapse_mean = mean(lapse_mean)), linetype = "dashed")

plot_day <- labels_day |> 
  mutate(window = "Day",
         window = factor(window),
         lapse = if_else(lapse == "no", 0, 1))  |> 
  group_by(window, subid) |> 
  summarise(lapse_mean = mean(lapse), .groups = "drop") |> 
  ggplot() +
  geom_histogram(mapping = aes(x = lapse_mean), fill = "#00BA38",
                 color = "black", alpha = .4, binwidth = .05, boundary = 0) +
  facet_wrap(~window) +
  xlab("Lapse Rate") +
  ylab(NULL) +
  scale_x_continuous(breaks = seq(0, 1, .2), limits = c(0, 1)) +
  scale_y_continuous(limits = c(0, 150)) +
  geom_vline(aes(xintercept = lapse_mean), labels_day |> 
    group_by(subid) |> 
    mutate(lapse = if_else(lapse == "no", 0, 1)) |> 
    summarise(lapse_mean = mean(lapse), .groups = "drop_last") |> 
    summarise(lapse_mean = mean(lapse_mean)), linetype = "dashed") +
  theme(axis.text.y=element_blank(),
        axis.ticks.y=element_blank())


plot_hour <- labels_hour |> 
  mutate(window = "Hour",
         window = factor(window),
         lapse = if_else(lapse == "no", 0, 1))  |> 
  group_by(subid, window) |> 
  summarise(lapse_mean = mean(lapse), .groups = "drop") |> 
  ggplot() +
  geom_histogram(mapping = aes(x = lapse_mean), fill = "#619CFF",
                 color = "black", alpha = .4, binwidth = .01, boundary = 0) +
  facet_wrap(~window) +
  xlab("Lapse Rate") +
  ylab(NULL) +
  scale_x_continuous(breaks = seq(0, .2, .04), limits = c(0, .2)) +
  scale_y_continuous(limits = c(0, 150)) +
  geom_vline(aes(xintercept = lapse_mean), labels_hour |> 
    group_by(subid) |> 
    mutate(lapse = if_else(lapse == "no", 0, 1)) |> 
    summarise(lapse_mean = mean(lapse), .groups = "drop_last") |> 
    summarise(lapse_mean = mean(lapse_mean)), linetype = "dashed") +
  theme(axis.text.y=element_blank(),
        axis.ticks.y=element_blank())


plot_week + plot_day + plot_hour 
```


```{r fig_lapses_v2, fig.height = 6}
#| output: true
#| fig-cap: 
#|   - "Mean lapse rates per participant by model. Overall mean lapse rate is depicted by the dashed line. (version 2 with same x-axis scale)"

labels_all <- labels_week |> 
  mutate(window = "Week") |> 
  bind_rows(labels_day |> 
              mutate(window = "Day")) |> 
  bind_rows(labels_hour |> 
              mutate(window = "Hour")) |> 
  mutate(window = factor(window, levels = c("Week", "Day", "Hour")),
         lapse = if_else(lapse == "no", 0, 1)) 

labels_all |> 
  group_by(window, subid) |> 
  summarise(lapse_mean = mean(lapse), .groups = "drop") |> 
  ggplot() +
  geom_histogram(mapping = aes(x = lapse_mean, fill = window), 
                 color = "black", alpha = .4, binwidth = .05, boundary = 0) +
  facet_wrap(~window, ncol = 1) +
  xlab("Lapse Rate") +
  ylab("Count") +
  scale_x_continuous(breaks = seq(0, 1, .1)) +
  geom_vline(aes(xintercept = lapse_mean), labels_all |> 
    group_by(window, subid) |> 
    summarise(lapse_mean = mean(lapse), .groups = "drop_last") |> 
    summarise(lapse_mean = mean(lapse_mean)), linetype = "dashed")
```

<!--***************************************************************************-->
<!-- Figure S3: EMA completion rate for 4x daily and 1x daily by week-->
<!--JOHN: I Confirmed you referred to this as completion percentages in results section of manuscript.-->

```{r}
ana_sample <- disposition |> 
  filter(analysis == "yes")

ema <- ema_m |> 
  select(subid, start_date) |> 
  full_join(ema_l |> select(subid, start_date), by = c("subid", "start_date")) |> 
  mutate(start_date = date(start_date),
         subid = as.numeric(subid)) |> 
  filter(subid %in% ana_sample$subid)

# function to map over
get_study_days <- function(the_subid, dates) {
  start_study <- dates |> filter(subid == the_subid) |> pull(start_study)
  end_study <- dates |> filter(subid == the_subid) |> pull(end_study)
  study_days <- tibble(subid = the_subid, study_day = seq(start_study, end_study - days(1), by = "day")) 
  return(study_days)
}

study_dates <- ana_sample$subid |> 
  map_dfr(~get_study_days(.x, disposition |> 
                            select(subid, start_study, end_study)))

# count EMAs per day
ema_count_4x <- ema |>  
  count(subid, start_date) |>
  mutate(n = if_else(n > 4, 4, as.numeric(n)))

# left join with study dates
ema_study_dates <- study_dates |>
  left_join(ema_count_4x |> 
              mutate(subid = as.character(subid)), by = c("subid", "study_day" = "start_date")) |> 
  mutate(n = if_else(is.na(n), 0, n)) |> 
  mutate(n_prompts = 4)

# slice into 7 day bins
ema_study_weeks <- ema_study_dates |> 
  group_by(subid) |> 
  slice(1:7) |> 
  mutate(week = 1) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(8:14) |> 
    mutate(week = 2)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(15:21) |> 
    mutate(week = 3)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(22:28) |> 
    mutate(week = 4)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(29:35) |> 
    mutate(week = 5)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(36:42) |> 
    mutate(week = 6)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(43:49) |> 
    mutate(week = 7)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(50:56) |> 
    mutate(week = 8)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(57:63) |> 
    mutate(week = 9)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(64:70) |> 
    mutate(week = 10)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(71:77) |> 
    mutate(week = 11)) |> 
  bind_rows(ema_study_dates |> 
    group_by(subid) |> 
    slice(78:84) |> 
    mutate(week = 12)) |> 
  ungroup()

ema_week_compliance_4x <- ema_study_weeks |> 
  group_by(subid, week) |> 
  summarize(sum_n = sum(n), sum_prompts = sum(n_prompts), .groups = "rowwise") |> 
  mutate(compliance = sum_n/sum_prompts) |> 
  ungroup()

ema_week_compliance_1x <- ema_study_weeks |>
  mutate(n = if_else(n > 1, 1, n),
         n_prompts = 1) |> 
  group_by(subid, week) |> 
  summarize(sum_n = sum(n), sum_prompts = sum(n_prompts), .groups = "rowwise") |> 
  mutate(compliance = sum_n/sum_prompts) |> 
  ungroup()
```



```{r fig_completion, fig.width = 6, fig.height = 4}
#| output: true
#| fig-cap: 
#|   - "Completion percentages by week on study for 1x and 4x daily EMA."

week_compliance_all <- ema_week_compliance_4x |> 
              mutate(compliance = compliance*100) |> 
              group_by(week) |> 
              summarize(mean_compliance = mean(compliance),
                        n = n(),
                        sd = sd(compliance)) |> 
              mutate(se = sd/sqrt(n),
                     signal = "4x Daily") |> 
  bind_rows(ema_week_compliance_1x |> 
              mutate(compliance = compliance*100) |> 
              group_by(week) |> 
              summarize(mean_compliance = mean(compliance),
                        n = n(),
                        sd = sd(compliance)) |> 
              mutate(se = sd/sqrt(n),
                     signal = "1x Daily")) 


week_compliance_all |> 
  mutate(signal = factor(signal, levels = c("1x Daily", "4x Daily"))) |> 
  group_by(week, signal) |> 
  ggplot(aes(x = week, y = mean_compliance, group = signal, shape = signal)) +
  geom_point(size = 2) +
  geom_line() +
  geom_errorbar(aes(ymin = mean_compliance - se, ymax = mean_compliance + se), 
                width = .3, linewidth = .3) +
  theme_classic() +
  scale_shape_manual(values = c(19, 1, 17)) +
  scale_x_continuous(name = "Week", 
                     breaks = seq(1, 12, 1)) +
  scale_y_continuous(name = "Completion percentage", 
                     breaks = seq(0, 100, 10), 
                     limits = c(0, 100)) +
  geom_hline(aes(yintercept = mean_compliance), week_compliance_all |> 
               group_by(signal) |> 
               summarize(mean_compliance = mean(mean_compliance)),
             linetype = "dashed", linewidth = .3) +
  theme(legend.title = element_blank(),
        legend.position = "bottom")
```



<!--***************************************************************************-->
<!-- THIS WILL BE FIGURE S4-->
<!-- ROC curves and AUCs for each held out fold-->
```{r}
fig_roc_week <- roc_week_full |> 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) + 
  geom_abline(lty = 3) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Specificity",
       y = "Sensitivity") +
  scale_x_continuous(breaks = seq(0,1,.25),
    labels = sprintf("%.2f", seq(1,0,-.25))) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
  
for (i in 1:nrow(roc_week)) {
  fig_roc_week <- fig_roc_week +
     geom_path(data = roc_week$roc[[i]],
               mapping = aes(x = 1 - specificity, y = sensitivity),
               color = "#fdd2ce")
}

fig_roc_week <- fig_roc_week +
     geom_path(data = roc_week_full,
               mapping = aes(x = 1 - specificity, y = sensitivity),
               color = "#F8766D", linewidth = 1)
```

```{r}
fig_roc_day <- roc_day_full |> 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) + 
  geom_abline(lty = 3) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Specificity",
       y = "Sensitivity") +
  scale_x_continuous(breaks = seq(0,1,.25),
    labels = sprintf("%.2f", seq(1,0,-.25))) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) 
  
for (i in 1:nrow(roc_day)) {
  fig_roc_day <- fig_roc_day +
     geom_path(data = roc_day$roc[[i]],
               mapping = aes(x = 1 - specificity, y = sensitivity),
               color = "#bcffcf")
}

fig_roc_day <- fig_roc_day +
     geom_path(data = roc_day_full,
               mapping = aes(x = 1 - specificity, y = sensitivity),
               color = "#00BA38", linewidth = 1)
  
```

```{r}
fig_roc_hour <- roc_hour_full |> 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) + 
  geom_abline(lty = 3) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Specificity",
       y = "Sensitivity") +
  scale_x_continuous(breaks = seq(0,1,.25),
    labels = sprintf("%.2f", seq(1,0,-.25))) 
  
for (i in 1:nrow(roc_hour)) {
  fig_roc_hour <- fig_roc_hour +
     geom_path(data = roc_hour$roc[[i]],
               mapping = aes(x = 1 - specificity, y = sensitivity),
               color = "#c8dcff")
}

fig_roc_hour <- fig_roc_hour +
     geom_path(data = roc_week_full,
               mapping = aes(x = 1 - specificity, y = sensitivity),
               color = "#619CFF", linewidth = 1)
```

```{r}
fig_auc_week <- auc_week |> 
  mutate(model = "Week") |>
  ggplot() + 
  geom_histogram(aes(x = roc_auc), fill = "#F8766D", color = "black", alpha = .4, bins = 15) +
  facet_wrap(~model, ncol = 1, strip.position = "right") +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        legend.position = "none") +
  ylab("Count")

fig_auc_day <- auc_day |> 
  mutate(model = "Day") |>
  ggplot() + 
  geom_histogram(aes(x = roc_auc), fill = "#00BA38", color = "black", alpha = .4, bins = 15) +
  facet_wrap(~model, ncol = 1, strip.position = "right") +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        legend.position = "none") +
  ylab("Count")

fig_auc_hour <- auc_hour |> 
  mutate(model = "Hour") |> 
  ggplot() + 
  geom_histogram(aes(x = roc_auc), fill = "#619CFF", color = "black", alpha = .4, bins = 15) +
  facet_wrap(~model, ncol = 1, strip.position = "right") +
  xlab("Area Under ROC Curve (per fold)") +
  ylab("Count")
```


```{r fig.height = 7}
#| output: true
#| fig-cap: 
#|   - "Insert note here."

plot_grid(fig_roc_week, fig_auc_week, fig_roc_day, fig_auc_day, fig_roc_hour, fig_auc_hour,
          ncol = 2, align = "h")
```


<!--***************************************************************************-->
<!-- THIS WILL BE FIGURE S5-->
<!-- Bayesian Model Contrasts -->


```{r fig_posterior_d, fig.height = 7, fig.width = 7}
#| output: true
#| fig-cap: 
#|   - "Posterior Probabilities for Model Contrasts for AUC.   Region of Practical Equivalence (ROPE) indicated by dashed yellow lines."

ci <- pp |> 
  contrast_models(list("hour","hour", "day"), 
                list("week", "day", "week")) |> 
  summary(size = .01) |> 
  mutate(contrast = factor(contrast, 
                           levels = c("hour vs week", "hour vs day", "day vs week"),
                           labels = c("Hour vs. Week", "Hour vs. Day", "Day vs. Week")),
         y = 700)

pp |> 
  tidy(seed = 123) |>   
  group_by(model) |> 
  mutate(sample = row_number()) |> 
  ungroup() |> 
  pivot_wider(names_from = model, values_from = posterior) |> 
  mutate(hour_vs_week = hour - week,
         hour_vs_day = hour - day,
         day_vs_week = day - week) |> 
  pivot_longer(cols = hour_vs_week:day_vs_week,
               names_to = "contrast",
               values_to = "posterior") |> 
  mutate(contrast = factor(contrast, 
                           levels = c("hour_vs_week", "hour_vs_day", "day_vs_week"),
                           labels = c("Hour vs. Week", "Hour vs. Day", "Day vs. Week"))) |> 
  ggplot() +
  geom_histogram(aes(x = posterior, fill = contrast), 
                 color = "black", alpha = .4, bins = 30) +
  geom_vline(xintercept = -.01, color = "yellow", linetype = "dashed", size = 1) +
  geom_vline(xintercept = .01, color = "yellow", linetype = "dashed", size = 1) +
  geom_segment(mapping = aes(y = y+100, yend = y-100, x = mean, xend = mean,
                             color = contrast), data = ci, show.legend = FALSE) +
  geom_segment(mapping = aes(y = y, yend = y, x = lower, xend = upper, 
                             color = contrast), data = ci, show.legend = FALSE) +
  geom_text(data = ci, x = c(.0255, .043, .018), y = 700, 
            label = str_c(round(ci$mean, 2), " [", round(ci$lower, 2), ", ", round(ci$upper, 2), "]")) +
  facet_wrap(~contrast, ncol = 1) +
  xlab("Posterior")
  
```






<!--***************************************************************************-->
<!-- Figure S6: lapse probability predictions faceted by model-->


```{r fig.width = 7.5, fig.height = 5}
#| output: true
#| fig-cap: 
#|   - "Insert note here."

fig_preds_week_lapse <- preds_week |> 
  rename(truth = label) |> 
  mutate(estimate = if_else(prob < .5, "No lapse", "Lapse"),
         model = "Week") |> 
  filter(truth == "Lapse") |> 
  ggplot(aes(x = prob)) + 
   geom_histogram(bins = 15, fill = "#F8766D", col = "black", alpha = .4) +
   facet_wrap(~model) +
   xlab("Pr(Lapse)") +
  geom_vline(xintercept = .5, linetype = "dashed") +
  scale_y_continuous(labels = scales::comma) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
  ylab("Count")

fig_preds_week_nolapse <- preds_week |> 
  rename(truth = label) |> 
  mutate(estimate = if_else(prob < .5, "No lapse", "Lapse"),
         model = "Week") |> 
  filter(truth == "No lapse") |> 
  ggplot(aes(x = prob)) + 
   geom_histogram(bins = 15, fill = "#F8766D", col = "black", alpha = .4) +
   xlab("Pr(Lapse)") +
  geom_vline(xintercept = .5, linetype = "dashed") +
  scale_y_continuous(labels = scales::comma) +
  ylab("Count")


fig_preds_day_lapse <- preds_day |> 
  rename(truth = label) |> 
  mutate(estimate = if_else(prob < .5, "No lapse", "Lapse"),
         model = "Day") |> 
  filter(truth == "Lapse") |>
  ggplot(aes(x = prob)) + 
   geom_histogram(bins = 15, fill = "#00BA38", col = "black", alpha = .4) +
   facet_wrap(~model) +
   xlab("Pr(Lapse)") +
  geom_vline(xintercept = .5, linetype = "dashed") +
  scale_y_continuous(labels = scales::comma) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
  ylab(NULL)

fig_preds_day_nolapse <- preds_day |> 
  rename(truth = label) |> 
  mutate(estimate = if_else(prob < .5, "No lapse", "Lapse"),
         model = "Day") |> 
  filter(truth == "No lapse") |>
  ggplot(aes(x = prob)) + 
   geom_histogram(bins = 15, fill = "#00BA38", col = "black", alpha = .4) +
   xlab("Pr(Lapse)") +
  geom_vline(xintercept = .5, linetype = "dashed") +
  scale_y_continuous(labels = scales::comma) +
  ylab(NULL)

fig_preds_hour_lapse <- preds_hour |> 
  rename(truth = label) |> 
  mutate(estimate = if_else(prob < .5, "No lapse", "Lapse"),
         model = "Hour") |> 
  filter(truth == "Lapse") |>
  ggplot(aes(x = prob)) + 
   geom_histogram(bins = 15, fill = "#619CFF", col = "black", alpha = .4) +
   facet_grid(truth~model) +
   xlab("Pr(Lapse)") +
  geom_vline(xintercept = .5, linetype = "dashed") +
  scale_y_continuous(labels = scales::comma) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
  ylab(NULL)

fig_preds_hour_nolapse <- preds_hour |> 
  rename(truth = label) |> 
  mutate(estimate = if_else(prob < .5, "No lapse", "Lapse"),
         model = "Hour") |> 
  filter(truth == "No lapse") |>
  ggplot(aes(x = prob)) + 
   geom_histogram(bins = 15, fill = "#619CFF", col = "black", alpha = .4) +
   facet_wrap(~truth, strip.position = "right") +
   xlab("Pr(Lapse)") +
  geom_vline(xintercept = .5, linetype = "dashed") +
  scale_y_continuous(labels = scales::comma) +
  ylab(NULL)


fig_week <- plot_grid(fig_preds_week_lapse, fig_preds_week_nolapse, ncol = 1, align = "v")
fig_day <- plot_grid(fig_preds_day_lapse, fig_preds_day_nolapse, ncol = 1, align = "v")
fig_hour <- plot_grid(fig_preds_hour_lapse, fig_preds_hour_nolapse, ncol = 1, align = "v")


plot_grid(fig_week, fig_day, fig_hour, nrow = 1, rel_widths = c(1, 1, 1.1))
```



