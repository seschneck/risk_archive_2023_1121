---
title: "Makes ROC by ID dataset for the Insight study (version `r version`)"
author: "Gaylen Fronk"
date: "`r lubridate::today()`"
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

### Set Up Environment

```{r set_values}
study <- "insight"
version <- "v2"
cv <- "nested"
```

Function conflicts
```{r, packages_workflow}
#| message: false
#| warning: false

# source
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")

# handle conflicts
options(conflicts.policy = "depends.ok")
tidymodels_conflictRules()
```

Packages for script
```{r, packages_script}
#| message: false
#| warning: false

library(tidyverse)
library(tidymodels)
library(lubridate)
```

Source support functions
```{r source_functions}
# EDA
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")

# CHTC support functions
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/chtc/static_files/fun_chtc.R?raw=true")
```

Absolute paths
```{r, absolute_paths}
switch (Sys.info()[['sysname']],
        # PC paths
        Windows = {
          path_input <- str_c("P:/studydata/risk/chtc/", study)
          path_processed <- str_c("P:/studydata/risk/data_processed/")
          path_models <- str_c("P:/studydata/risk/models/", study)
          path_knits <- str_c("P:/studydata/risk/knits/", study)},
        
        # IOS paths
        Darwin = {
          path_input <- str_c("/Volumes/private/studydata/risk/chtc/", study)
          path_processed <- str_c("/Volumes/private/studydata/risk/data_processed/")
          path_models <- str_c("/Volumes/private/studydata/risk/models/", study)
          path_knits <- str_c("/Volumes/private/studydata/risk/knits/", study)},
        
        # Linux paths
        Linux = {
          path_input <- str_c("~/mnt/private/studydata/risk/chtc/", study)
          path_processed <- str_c("~/mnt/private/studydata/risk/data_processed/")
          path_models <- str_c("~/mnt/private/studydata/risk/models/", study)
          path_knits <- str_c("~/mnt/private/studydata/risk/knits/", study)}
)
```

Chunk Defaults
```{r defaults}
#| include: false

knitr::opts_chunk$set(attr.output='style="max-height: 500px;"')

options(tibble.width = Inf)
options(tibble.print_max = Inf)
```

Knit to specific directory
```{r, eval = FALSE, include=FALSE}
# Render knit file manually to different location

rmarkdown::render(input = file.path("insight/mak_scripts/mak_roc_id.qmd"),
                  output_dir = file.path(path_knits),
                  output_file = str_c("mak_roc_id.html"),
                  env = new.env())
```

## Prep Data

### Read in

Features file (also includes demos)
```{r}
feat <- read_csv(file.path(path_processed, study, "features_v1.csv"), 
                 show_col_types = FALSE) |> 
  mutate(dttm_label = with_tz(dttm_label, tz = "America/Chicago"))

```

Dates
```{r}
dates <- read_csv(file.path(path_processed, study, "study_dates.csv"),
                  show_col_types = FALSE) |> 
  mutate(across(c(study_start, data_start, study_end, ema_end),
                ~ with_tz(., tz = "America/Chicago")))
```

Intake
```{r}
intake <- read_csv(file.path(path_processed, "shared", "intake.csv"),
                   show_col_types = FALSE) |> 
  select(subid, starts_with("dass21"))
```

Static features (from META)
```{r}
static <- read_csv(file.path(path_processed, "meta", "static_features.csv"),
                   show_col_types = FALSE) |> 
  select(subid, id_age, id_number_quit_attempts, id_age_first_drank,
         id_age_drank_regularly, id_dsm5_total, starts_with("id_yap"),
         id_scl90_depression, id_scl90_anxiety, starts_with("id_mps"))
```

### Make additional relevant variables

DASS21
```{r}
intake <- intake |> 
  mutate(across(starts_with("dass21"),
                ~ dplyr::recode(.x, 
                                "Never" = 0,
                                "Sometimes" = 1,
                                "Often" = 2,
                                "Almost Always" = 3))) |> 
  rowwise() |> 
  mutate(dass_anxiety = sum(dass21_2, dass21_4, dass21_7,
                            dass21_9, dass21_15, dass21_19, dass21_20),
         dass_depression = sum(dass21_3, dass21_5, dass21_10,
                               dass21_13, dass21_16, dass21_17, dass21_21),
         dass_stress = sum(dass21_1, dass21_6, dass21_8, dass21_11,
                           dass21_12, dass21_14, dass21_18)) |> 
  select(subid, dass_anxiety, dass_depression, dass_stress)

```

MPS Constraint
```{r}
static <- static |> 
  mutate(mps_constraint = (id_mps_wellbeing * -0.085) + 
           (id_mps_social_potency * -0.052) + (id_mps_achievement * 0.241) + 
           (id_mps_social_closeness * -0.068) + (id_mps_stress_reaction * 0.046) + 
           (id_mps_alienation * -0.302) + (id_mps_aggression* 0.296) + 
           (id_mps_control * 2.717) + (id_mps_harm_avoidance * 2.579) + 
           (id_mps_traditionalism * 2.199) + 20.742)
```

Years Drinking
```{r}
static <- static |> 
  mutate(years_drinking = id_age - id_age_first_drank,
         years_drinking_regularly = id_age - id_age_drank_regularly)
```

### Combine

Select down within static features
```{r}
static <- static |> 
  select(subid, starts_with("years"), starts_with("id_yap"), id_dsm5_total,
         id_number_quit_attempts, starts_with("id_scl90"), mps_constraint)
```

Join by subid
```{r}
d <- feat |> 
  left_join(dates, by = "subid") |> 
  left_join(static, by = "subid") |> 
  left_join(intake, by = "subid")

glimpse(d)
```

Make study week variable
```{r}
d <- d |> 
  mutate(study_duration = difftime(dttm_label, data_start, units = "secs")) |> 
  mutate(study_week = case_when(
    study_duration > (13 * 604800) ~ "week_14",
    study_duration > (12 * 604800) ~ "week_13",
    study_duration > (11 * 604800) ~ "week_12",
    study_duration > (10 * 604800) ~ "week_11",
    study_duration > (9 * 604800) ~ "week_10",
    study_duration > (8 * 604800) ~ "week_9",
    study_duration > (7 * 604800) ~ "week_8",
    study_duration > (6 * 604800) ~ "week_7",
    study_duration > (5 * 604800) ~ "week_6",
    study_duration > (4 * 604800) ~ "week_5",
    study_duration > (3 * 604800) ~ "week_4",
    study_duration > (2 * 604800) ~ "week_3",
    study_duration > 604800 ~ "week_2",
    study_duration > 1 ~ "week_1",
  )) |> 
  select(-study_start, -study_end, -ema_end, -study_duration) |> 
  glimpse()
```

Remove unnecessary datasets
```{r}
rm(feat)
rm(static)
rm(intake)
rm(dates)
```

## Function

```{r}
fit_predict_eval <- function(split_num, splits, configs_best){
  
  config_best <- configs_best |> 
    slice(split_num) |> 
    rename(n_jobs_in = n_jobs, accuracy_in = accuracy, 
           bal_accuracy_in = bal_accuracy,
           roc_auc_in = roc_auc, sens_in =  sens, spec_in = spec, 
           ppv_in = ppv, npv_in = npv)
  
  d_in <- training(splits$splits[[split_num]]) |> 
    select(-study_week, -starts_with("years_"), -starts_with("id_yap_"),
           -id_dsm5_total, -id_number_quit_attempts, -mps_constraint,
           -starts_with("id_scl90"), -starts_with("dass_"))
  d_out <- testing(splits$splits[[split_num]])
  
  d_id <- d_out |> 
    select(study_week, starts_with("years_"), starts_with("id_yap_"),
           id_dsm5_total, id_number_quit_attempts, mps_constraint,
           starts_with("id_scl90"), starts_with("dass_"),
           demo_sex, demo_educ)
  
  rec <- build_recipe(d = d_in, config = config_best)
  
  rec_prepped <- rec |> 
    prep(training = d_in, strings_as_factors = FALSE)
  
  feat_in <- rec_prepped |> 
    bake(new_data = NULL)
  
  model_best <- fit_best_model(config_best, feat_in, "classification")
  
  feat_out <- rec_prepped %>% 
    bake(new_data = d_out)
  
  # metrics from raw (uncalibrated) predictions for held out fold
  preds_prob <- predict(model_best, feat_out,
                        type = "prob")
  preds_class <- predict(model_best, feat_out, type = "class")$.pred_class
  
  # combine
  probs_out <- tibble(outer_split_num = rep(split_num, nrow(preds_prob)),
                      prob_raw = preds_prob[[str_c(".pred_", y_level_pos)]],
                      label = d_out$y) |> 
    mutate(label = fct_recode(label, "No lapse" = "no",
                              "Lapse" = "yes")) |> 
    bind_cols(d_id)
  
  return(probs_out)
}
```

## Get best configurations

Read in aggregate CHTC metrics for inner folds
```{r read_inner_metrics}
metrics_raw <- 
  read_csv(file.path(path_models, 
                     str_c("inner_metrics_", version, "_", cv, ".csv")), 
           col_types = "iiiiccdddcdddddddc") |> 
  filter(outcome == "1week") |> 
  glimpse()
```

Average metrics for each configuration across inner folds for each outer fold
```{r best_model_1}
metrics_avg <- metrics_raw |> 
  filter(feature_set == "insight_only") |> 
  group_by(outcome, algorithm, feature_set, 
           hp1, hp2, hp3, resample, outer_split_num) |> 
  summarize(across(c(accuracy, bal_accuracy, roc_auc, sens, spec, ppv, npv),
                   median),
            n_jobs = n(), .groups = "drop") |> 
  relocate(outer_split_num, n_jobs) |> 
  arrange(outer_split_num, desc(roc_auc))

```

Best configuration for each outer fold
```{r best_model_2}
configs_best <- metrics_avg |> 
  group_by(outer_split_num) |> 
  arrange(desc(roc_auc)) |> 
  slice(1) |> 
  ungroup() |> 
  relocate(roc_auc, .before = accuracy) 

configs_best |> print_kbl()

```

## Get all probabilities from held-out folds & tag

```{r}

batch_names <- list.dirs(path_input, full.names = FALSE, recursive = FALSE)

batch_names <- batch_names[str_detect(batch_names, "train") & 
                             str_detect(batch_names, cv) &
                             str_detect(batch_names, version) &
                             str_detect(batch_names, "1week")] 
batch_name <- batch_names[1] 
# all TC files are the same except feature_set, which we set manually within map loop

source(file.path(path_input, batch_name, "input", "training_controls.R"))

d <- format_data(d)

splits <- d %>% 
  make_splits(cv_resample_type, cv_resample, cv_outer_resample, 
              cv_inner_resample, cv_group, seed_splits)

all_probs <- configs_best$outer_split_num |> 
  map(\(split_num) fit_predict_eval(split_num, splits, configs_best)) |> 
  list_rbind()

rm(splits)

all_probs |> 
  write_csv(file.path(path_models, str_c("probs_by_ids_", version, ".csv")))

```

## Calculate ROCs by ID

### Categorical variables

Sex 
```{r}
roc_sex <- all_probs |> 
  select(outer_split_num, prob_raw, label, demo_sex) |> 
  group_by(outer_split_num, demo_sex) |> 
  summarize(roc = roc_auc_vec(prob_raw, truth = label, 
                              event_level = "first")) |> 
  ungroup() |> 
  pivot_wider(names_from = demo_sex, values_from = roc,
              names_prefix = "roc_") |> 
  arrange(outer_split_num) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10), 3)) |> 
  select(-outer_split_num) |> 
  janitor::clean_names() |> 
  relocate(repeat_num, fold_num) |> 
  glimpse()
```

Education
```{r}
roc_educ <- all_probs |> 
  select(outer_split_num, prob_raw, label, demo_educ) |> 
  group_by(outer_split_num, demo_educ) |> 
  summarize(roc = roc_auc_vec(prob_raw, truth = label, 
                              event_level = "first")) |> 
  ungroup() |> 
  pivot_wider(names_from = demo_educ, values_from = roc,
              names_prefix = "roc_") |> 
  arrange(outer_split_num) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10), 3)) |> 
  select(-outer_split_num) |> 
  janitor::clean_names() |> 
  relocate(repeat_num, fold_num) |> 
  glimpse()
```
Causes warnings & NAs because some groups (e.g., fold, repeat, education level) don't have any observations in "truth" with event label "Lapse" (so no true positives?)

Study week (maybe make ordinal/numeric?)
```{r}
roc_week <- all_probs |> 
  select(outer_split_num, prob_raw, label, study_week) |> 
  group_by(outer_split_num, study_week) |> 
  summarize(roc = roc_auc_vec(prob_raw, truth = label, 
                              event_level = "first")) |> 
  ungroup() |> 
  pivot_wider(names_from = study_week, values_from = roc,
              names_prefix = "roc_") |> 
  arrange(outer_split_num) |> 
  mutate(repeat_num = rep(str_c("repeat", 1:3), each = 10),
         fold_num = rep(str_c("fold", 1:10), 3)) |> 
  select(-outer_split_num) |> 
  janitor::clean_names() |> 
  relocate(repeat_num, fold_num) |> 
  glimpse()
```

### Continuous variables