---
title: "Evaluate models' performance in held out outer folds for `r window` and `r features` models (version `r version`)"
author: "Gaylen Fronk, John Curtin, & Kendra Wyant"
date: "`r lubridate::today()`"
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

### Code Status

In use with iterative improvement

### Notes
This is a generic script that reproduces the CV metrics for the best model configuration, calculates various performance metrics from that resampling, makes plots, and then fits the best config to the final sample to do feature importance.

This script is called by various studies, passing in the data_type, window, lead, and version.


### Set Up Environment

```{r set_values}
study <- "insight"
version <- "v2"
cv <- "nested"
```

Function conflicts
```{r, packages_workflow}
#| message: false
#| warning: false

# source
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")

# handle conflicts
options(conflicts.policy = "depends.ok")
tidymodels_conflictRules()
```

Packages for script
```{r, packages_script}
#| message: false
#| warning: false

library(tidyverse)
library(tidymodels)
library(tidyposterior)
# library(SHAPforxgboost)
# library(rstanarm)

theme_set(theme_classic()) 
```

Source support functions
```{r source_functions}
# EDA
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")

# CHTC support functions
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/chtc/static_files/fun_chtc.R?raw=true")
```


Absolute paths
```{r, absolute_paths}
switch (Sys.info()[['sysname']],
        # PC paths
        Windows = {
          path_input <- str_c("P:/studydata/risk/chtc/", study)
          path_processed <- str_c("P:/studydata/risk/data_processed/", study)
          path_models <- str_c("P:/studydata/risk/models/", study)
          path_knits <- str_c("P:/studydata/risk/knits/", study)},

        # IOS paths
        Darwin = {
          path_input <- str_c("/Volumes/private/studydata/risk/chtc/", study)
          path_processed <- str_c("/Volumes/private/studydata/risk/data_processed/",
                                  study)
          path_models <- str_c("/Volumes/private/studydata/risk/models/", study)
          path_knits <- str_c("/Volumes/private/studydata/risk/knits/", study)},
        
        # Linux paths
        Linux = {
          path_input <- str_c("~/mnt/private/studydata/risk/chtc/", study)
          path_processed <- str_c("~/mnt/private/studydata/risk/data_processed/",
                                  study)
          path_models <- str_c("~/mnt/private/studydata/risk/models/", study)
          path_knits <- str_c("~/mnt/private/studydata/risk/knits/", study)}
        )
```


Chunk Defaults
```{r defaults}
#| include: false

knitr::opts_chunk$set(attr.output='style="max-height: 500px;"')

options(tibble.width = Inf)
options(tibble.print_max = Inf)
```


Source training controls 
```{r source}
# EDA
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")

# CHTC support functions
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/chtc/static_files/fun_chtc.R?raw=true")

# ML functions
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")

```

Knit to specific directory
```{r, eval = FALSE, include=FALSE}
# Render knit file manually to different location

rmarkdown::render(input = file.path(
  "insight/mak_scripts/3_eval_outer.qmd"),
  output_dir = file.path(path_knits),
  output_file = str_c("3_eval_outer_", version, ".html"),
  env = new.env())
```


### Model Performance Metrics

```{r read_metrics_preds}
all_files <- list.files(path_models, full.names = TRUE) 
preds_files <- all_files[str_detect(all_files, "outer_preds_") &
                             str_detect(all_files, version)]

preds_out <- preds_files |> 
  map(\(file) read_rds(file) |> 
        mutate(model = str_extract(file, "(?<=outer_preds_)[:graph:]+(?=_v2_)")) |> 
        select(model, outer_split_num, prob_raw, label)) |> 
  list_rbind()

metrics_files <- all_files[str_detect(all_files, "outer_metrics_") & 
                           str_detect(all_files, version)]

metrics_out <- metrics_files |> 
  map(\(file) read_rds(file) |> 
        mutate(model = str_c(outcome, "_", feature_set))) |> 
  list_rbind()

```

#### Inner Loop AUC

Best model configurations were selected using the median AUCs across 10 inner folds.  30 (3x10) models were selected.  

```{r}
metrics_out |> glimpse()

metrics_out |> 
  group_by(model) |> 
  summarize(median(roc_auc_in), mean(roc_auc_in), min(roc_auc_in), max(roc_auc_in), sd(roc_auc_in))
```

#### Outer AUC

Best model configurations were evaluated using the AUCs from the 30 (3x10) outer folds

Outer overall
```{r metrics_out}
metrics_out |> 
  group_by(model) |> 
  summarize(median(roc_auc), mean(roc_auc))
```

Plot outer folds
```{r plot_outer}
# histograms faceted by model
metrics_out |> 
  ggplot(aes(x = roc_auc)) +
  geom_histogram(bins = 10) +
  facet_wrap(vars(model), ncol = 2)

# overlaid density plots
metrics_out |> 
  ggplot(aes(x = roc_auc, fill = as.factor(model))) +
  geom_density(alpha = 0.5) +
  labs(fill = "Model")
```

Table for each outer fold
```{r metrics_out_kbl}
models <- unique(metrics_out$model)

for (model in models) {
  metrics_out |> 
    filter(model == model) |> 
    print_kbl()
}

```

#### ROC curve
This is single ROC by concatenating all outer folds.
Could consider reporting this AUC though likely average of outer fold AUCs is more appropriate?
Could also plot ROC by fold but maybe too confusing?
```{r roc_info, include = FALSE, eval = FALSE}
preds_out %>%
  group_by(model) |> 
  roc_auc(prob_raw, truth = label)

# roc_data <- preds_out %>% 
#   roc_curve(prob_raw, truth = label)
#   
# roc_data %>% 
#   ggplot(aes(x = 1 - specificity, y = sensitivity, color = .threshold)) +
#   geom_path(linewidth = 2) +
#   geom_abline(lty = 3) +
#   coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
#   labs(x = "Specificity",
#        y = "Sensitivity") +
#   scale_x_continuous(breaks = seq(0,1,.25),
#     labels = sprintf("%.2f", seq(1,0,-.25))) +
#   scale_color_gradient(low="blue", high="red") +
#   theme(axis.text = element_text(size = rel(1.50)), 
#         axis.title = element_text(size = rel(1.75)))
```

And these are the curves for each outer fold

```{r, include = FALSE, eval = FALSE}

# rocs per fold
roc_folds <- preds_out %>%
  nest(.by = outer_split_num, .key = "preds") |> 
  mutate(roc = map(preds, \(preds) roc_curve(preds, prob_raw, # note changed from prob_beta while debugging
                                             truth = label)))

fig_roc_folds <- roc_data %>%  # plot region from full concatenated data 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) + 
  geom_abline(lty = 3) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Specificity",
       y = "Sensitivity") +
  scale_x_continuous(breaks = seq(0,1,.25),
    labels = sprintf("%.2f", seq(1,0,-.25))) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
  
for (i in 1:nrow(roc_folds)) {
  fig_roc_folds <- fig_roc_folds +
     geom_path(data = roc_folds$roc[[i]],
               mapping = aes(x = 1 - specificity, y = sensitivity),
               color = "gray")
}

#add full concatenated curve
fig_roc_folds +
     geom_path(data = roc_data,
               mapping = aes(x = 1 - specificity, y = sensitivity, color = .threshold),
               linewidth = 2) +
    scale_color_gradient(low="blue", high="red")
```









#### Probability Histograms
Histograms with free Y. Remove `scales = "free_y"` for fixed y but doesnt make sense to do this with the class imbalance
```{r prob_plot_free}
preds_out %>% 
  ggplot(data = ., aes(x = prob_raw)) + # note changed from prob_beta while debugging
   geom_histogram(bins = 100, fill = "white", col = "black") +
   facet_wrap(~label, nrow = 2, scales = "free_y") +
   xlab("Pr(Lapse)") +
  theme(axis.text = element_text(size = rel(1.00)), 
        axis.title.x = element_text(size = rel(1.25)),
        strip.text = element_text(size = rel(1.75)))
```


#### Outer individual metrics

Confusion matrix using .5 threshold
```{r default_cm}
(cm <- preds_out |> 
   mutate(estimate = if_else(prob_raw > .5, "Lapse", "No lapse"), # note changed from prob_beta while debugging
          estimate = factor(estimate, levels = c("Lapse", "No lapse"))) |> 
   conf_mat(truth = label, estimate = estimate))

cm %>% 
  autoplot() +
  theme(axis.text = element_text(size = rel(1.50)), 
        axis.title = element_text(size = rel(1.75)))

cm %>% summary()

# save plot for presentations
# ggsave(file.choose(), width = 7.5, height = 6.5, units = "in", device = "png",  dpi = 100)
```


Confusion matrix at optimal cut-point (based on Youdens J index)

https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1444894/
https://pubmed.ncbi.nlm.nih.gov/15405679/

```{r youden_cm}
j_thres_roc <- roc_data |> 
  mutate(j = sensitivity + specificity - 1) |> 
  slice_max(j) |> 
  print() |> 
  pull(.threshold)

(cm <- preds_out |> 
   mutate(estimate = if_else(prob_raw > j_thres_roc, "Lapse", "No lapse"), # note changed from prob_beta while debugging
          estimate = factor(estimate, levels = c("Lapse", "No lapse"))) |> 
   conf_mat(truth = label, estimate = estimate))

cm %>% 
  autoplot() +
  theme(axis.text = element_text(size = rel(1.50)), 
        axis.title = element_text(size = rel(1.75)))

cm %>% summary()
```



#### PR Curve
Here is precision/recall by concatenating all folds.  Same approach as above for ROC
```{r pr_info}
preds_out %>%
  pr_auc(prob_raw, truth = label) # note changed from prob_beta while debugging

pr_data <- preds_out %>% 
  pr_curve(prob_raw, truth = label) # note changed from prob_beta while debugging

pr_data %>% 
  ggplot(aes(x = recall, y = precision, color = .threshold)) +
  geom_path(linewidth = 2) +
  geom_hline(lty = 3, yintercept = mean(preds_out$label == "Lapse")) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  scale_color_gradient(low="blue", high="red") +
  labs(x = "Recall (Sensitivity)",
       y = "Precision (PPV)")
```

Sensitivity at min PPV of .7
```{r}
pr_data |> 
  filter(precision >= .7) |> 
  arrange(desc(recall)) |> 
  slice(1) |> 
  print()
```

Sensitivity at best F
```{r}
f <- pr_data |> 
  mutate(f =  (2 * precision * recall) / (precision + recall)) |> 
  slice_max(f) |> 
  print()
```


### Feature Importance

#### Grouped Features

```{r read_shaps_grp}
shapsgrp_out <- readRDS(file.path(path_models, str_c("outer_shapsgrp_", 
                                                        window, "_", features, "_", 
                                                        version, "_", cv, ".rds")))
```


Global importance SHAP plot for grouped features
```{r shap_grouped_plot}
shapsgrp_out %>% 
  group_by(variable_grp) %>% 
  summarize(mean_value = mean(abs(value)), .groups = "drop") %>% 
  arrange(mean_value) %>% 
  mutate(variable_grp = factor(variable_grp),
         variable_grp = fct_inorder(variable_grp)) %>% 
  ggplot(mapping = aes(x = variable_grp, y = mean_value)) +
  geom_point(size = 2, color = "red") +
  geom_segment(aes(x = variable_grp, y = mean_value, xend = variable_grp), 
               yend = 0, colour = "grey50")  +
  ylab("Mean |SHAP| value") +
  coord_flip()
```
