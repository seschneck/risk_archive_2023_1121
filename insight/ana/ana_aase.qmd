---
title: "Analyze AASE predicting Aggreagte Lapse Outcomes"
author: "Gaylen Fronk"
date: "`r lubridate::today()`"
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Setup

Handle conflicts

```{r, packages_workflow}
#| message: false
#| warning: false

options(conflicts.policy = "depends.ok")
```

Packages for script

```{r, packages_script}
#| message: false
#| warning: false

library(tidyverse)
theme_set(theme_classic()) 
```

Absolute paths

```{r, absolute paths}
switch (Sys.info()[['sysname']],
        # PC paths
        Windows = {
          path_data_shared <- str_c("P:/studydata/risk/data_processed/shared")
          path_data_insight <- str_c("P:/studydata/risk/data_processed/insight")},

        # IOS paths
        Darwin = {
          path_input <- str_c("/Volumes/private/studydata/risk/data_processed/shared")
          path_models <- str_c("/Volumes/private/studydata/risk/data_processed/insight")},
        
        # Linux paths
        Linux = {
          path_input <- str_c("~/mnt/private/studydata/risk/data_processed/shared")
          path_models <- str_c("~/mnt/private/studydata/risk/data_processed/insight")}
        )
```

Chunk Defaults

```{r defaults}
#| include: false

knitr::opts_chunk$set(attr.output='style="max-height: 500px;"')

options(tibble.width = Inf)
options(tibble.print_max = Inf)
```

## Set var_score function

```{r}
var_score <- function(d, forward_items, reverse_items = NULL, item_range = NULL, 
                      prorate = TRUE, max_miss = .20) {
  library(dplyr)
  
  # select relevant items
  d <- d %>% 
    select(all_of(forward_items), all_of(reverse_items))
  
  # check for out of range
  if (!is.null(item_range)) {
    if (!((min(d, na.rm = TRUE) %in% item_range || max(d, na.rm = TRUE) %in% item_range))) {
      stop("Item score(s) out of range")
    }
  }
  
  # check that length of range == 2 if reverse is not null
  if (!is.null(reverse_items) && length(item_range) != 2) {
    stop("Must specify item range (range) to reverse score items")
  }
  
  # reverse score relevant items
  if (!is.null(reverse_items)) {
    for (v in reverse_items) {                  
      d <- d %>% mutate({{v}} := (sum(item_range) - .data[[v]]))
    }   
  }
  
  max_missing_cols <- ncol(d) * max_miss
  d <- d %>% 
    rowwise() %>% 
    mutate(total = if_else(prorate,
                           mean(c_across(), na.rm = TRUE) * ncol(.), # if true
                           sum(c_across(), na.rm = TRUE))) %>%       # if false
    mutate(missing_cols = sum(is.na(c_across(!contains("total"))))) %>% # count miss cols excluding total
    mutate(total = if_else(missing_cols > max_missing_cols,  # set total to NA if too many missing
                           NA_real_,
                           total)) %>% 
    ungroup()
  return(d$total)
}
```

## Read in & prep data

### Intake (for AASE)

Read in 

```{r}
intake <- read_csv(file.path(path_data_shared, "intake.csv"), 
                   show_col_types = F) %>% 
  select(subid, starts_with("aase")) %>% 
  mutate(across(starts_with("aase"),
                ~ case_when(
                  . == "Not at all" ~ 0,
                  . == "Not very" ~ 1,
                  . == "Moderately" ~ 2,
                  . == "Very" ~ 3,
                  . == "Extremely" ~ 4,
                  TRUE ~ NA_integer_
                )))

glimpse(intake)
```

Make AASE total & subscale scores

```{r}
intake <- intake %>% 
  mutate(aase_na = var_score(., forward_items = c("aase_18",
                                                  "aase_16",
                                                  "aase_3",
                                                  "aase_14",
                                                  "aase_6"),
                             item_range = c(0, 4)),
         aase_soc = var_score(., forward_items = c("aase_15",
                                                   "aase_20",
                                                   "aase_4",
                                                   "aase_17",
                                                   "aase_8"),
                              item_range = c(0, 4)),
         aase_phys = var_score(., forward_items = c("aase_2",
                                                    "aase_12",
                                                    "aase_5",
                                                    "aase_13",
                                                    "aase_9"),
                               item_range = c(0, 4)),
         aase_crav = var_score(., forward_items = c("aase_1",
                                                    "aase_7",
                                                    "aase_11",
                                                    "aase_10",
                                                    "aase_19"),
                               item_range = c(0, 4)),
         aase_total = var_score(., forward_items = str_c("aase_", 1:20),
                                item_range = c(0, 4))) 
```

### Labeled windows (for 1-week matched outcome)

Read in 

```{r}
labels_1week <- read_csv(file.path(path_data_insight, "labels_1week.csv"),
                   show_col_types = F)

glimpse(labels_1week)
```

Make lapse dichotomous outcome variable

```{r}
labels_agg <- labels_1week %>% 
  mutate(lapse_num = if_else(lapse == "yes", 1, 0, NA_integer_)) %>% 
  group_by(subid) %>% 
  summarize(lapse_prop = mean(lapse_num),
            lapse_dich = if_else(lapse_prop > 0, 1, 0),
            .groups = "keep")
```

### Combine data

```{r}
d <- labels_agg %>% 
  left_join(., intake, by = "subid") %>% 
  glimpse()
```

## Correlations with Lapse Proportions

```{r}
cor.test(d$lapse_prop, d$aase_na)

cor.test(d$lapse_prop, d$aase_crav) 

cor.test(d$lapse_prop, d$aase_phys) 

cor.test(d$lapse_prop, d$aase_soc) 

cor.test(d$lapse_prop, d$aase_total)
```

## Logistic regression (Dichotomous Lapse ~ AASE scores)

AASE NA subscale
```{r}
model_na <- glm(lapse_dich ~ aase_na, data = d, family = "binomial")
summary(model_na)
```

AASE Crav subscale
```{r}
model_crav <- glm(lapse_dich ~ aase_crav, data = d, family = "binomial")
summary(model_crav)
```

AASE Phys subscale
```{r}
model_phys <- glm(lapse_dich ~ aase_phys, data = d, family = "binomial")
summary(model_phys)
```

AASE Soc subscale
```{r}
model_soc <- glm(lapse_dich ~ aase_soc, data = d, family = "binomial")
summary(model_soc)
```

AASE Total score
```{r}
model_total <- glm(lapse_dich ~ aase_total, data = d, family = "binomial")
summary(model_total)
```
