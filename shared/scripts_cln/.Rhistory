# Chunk 20
logs %>%
filter(!type %in% c(1:5, NA)) %>%
count(subid)
# Chunk 21
logs %>%
filter(str_detect(address, "~")) %>%
count(subid)
# Chunk 22
logs <- logs %>%
mutate(type = case_when(type == -1 ~ as.numeric(NA),
TRUE ~ type))
logs %>%
janitor::tabyl(type)
# Chunk 23
logs %>%
filter(type == 3)
# Chunk 24
logs %>%
janitor::tabyl(status)
# Chunk 25
logs %>%
filter(status == 64) %>%
count(type)
# Chunk 26
logs %>%
filter(type == 5) %>%
count(status)
# Chunk 27
logs %>%
janitor::tabyl(read)
# Chunk 28
logs %>%
filter(read == 0) %>%
count(type)
# Chunk 29
logs %>%
janitor::tabyl(locked)
# Chunk 30
logs %>%
filter(locked == 1) %>%
count(subid) %>%
arrange(desc(n))
# Chunk 31
logs %>%
janitor::tabyl(protocol)
# Chunk 32
logs %>%
filter(protocol == 57 | protocol == 95)
# Chunk 33
logs <- logs %>%
select(-protocol) %>%
glimpse()
# Chunk 34
logs %>%
count(subject == "null")
logs %>%
filter(subject != "null") %>%
select(subject) %>%
print(n = Inf)
# Chunk 35
logs %>%
filter(subject != "null") %>%
count(subid)
# Chunk 36
logs %>%
filter(subject != "null") %>%
select(address, contact_name, body)
# Chunk 37
logs <- logs %>%
select(-subject)
# Chunk 38
logs %>%
janitor::tabyl(toa)
logs %>%
janitor::tabyl(sc_toa)
# Chunk 39
logs <- logs %>%
select(-c(toa, sc_toa)) %>%
glimpse()
# Chunk 40
logs %>%
janitor::tabyl(service_center)
# Chunk 41
logs %>%
filter(type == 2) %>%
count(service_center)
# Chunk 42
logs %>%
filter(service_center == "null") %>%
count(type)
# Chunk 43
logs <- logs %>%
select(-service_center) %>%
glimpse()
# Chunk 44
logs %>%
select(body) %>%
slice_sample(n = 50) %>%
print(n = Inf)
# Chunk 45
logs %>%
filter(str_detect(address, "~")) %>%
select(body) %>% print(n = Inf)
# Chunk 46
logs %>%
filter(str_detect(body, "SurveySignal")) %>%
select(address, contact_name, body) %>%
print(n = Inf)
# Chunk 47
logs <- logs %>%
filter(!str_detect(body, "SurveySignal") | is.na(body))
# Chunk 48
logs %>%
count(date_sent == 0)
logs %>%
filter(date_sent != 0) %>%
count(type)
logs %>%
filter(date_sent == 0) %>%
count(type)
# Chunk 49
logs %>%
group_by(contact_name) %>%
slice(1) %>%
select(contact_name) %>%
print(n = Inf)
logs$address_clean <- map(logs$address, kendra_cln_number)
kendra_cln_number <- function(number) {
# I am thinking we should return the clean numbers as a new variable and then
# we can easily see which numbers were not caught/formatted by looking at
# missing values in formatted column.
number_formatted <- NULL
if(!is.na(number)) {
# Remove spaces, parentheses, and dashes - don't include email addresses
if(str_detect(number, "[[:space:]-\\(\\)]") & !str_detect(number, "[[:alpha:]]")) {
number_formatted <- str_replace_all(number, "[[:space:]-\\(\\)]", "")
}
# Remove +1 from US numbers
# check area codes don't start with a 0 or 1 in filter
if(str_detect(number, "^\\+1[2-9]") & nchar(number) == 12  & is.null(number_formatted)) {
number_formatted <- str_replace(number, "^\\+1", "")
}
# check formatted numbers
if(str_detect(number_formatted, "^\\+1[2-9]") & !is.null(number_formatted) & nchar(number_formatted) == 12) {
number_formatted <- str_replace(number_formatted, "^\\+1", "")
}
# remove 1 from US numbers with no +
if(str_detect(number, "^1[2-9]") & nchar(number) == 11 & is.null(number_formatted)) {
number_formatted <- str_replace(number, "^1", "")
}
# check formatted numbers
if(str_detect(number_formatted, "^1[2-9]") & nchar(number_formatted) == 11) {
number_formatted <- str_replace(number_formatted, "^1", "")
}
# remove + from US numbers (with no 1 or +1)
if(str_detect(number, "^\\+[2-9]") & nchar(number) == 11 & is.null(number_formatted)) {
number_formatted <- str_replace(number, "^\\+", "")
}
# check formatted numbers
if(str_detect(number_formatted, "^\\+[2-9]") & nchar(number_formatted) == 11) {
number_formatted <- str_replace(number_formatted,  "^\\+", "")
}
if(!is.null(number_formatted)) {
return(number_formatted)
}
}
return(as.character(NA))
}
logs$address_clean <- map(logs$address, kendra_cln_number)
kendra_cln_number <- function(number) {
# I am thinking we should return the clean numbers as a new variable and then
# we can easily see which numbers were not caught/formatted by looking at
# missing values in formatted column.
number_formatted <- NULL
if(!is.na(number)) {
# Remove spaces, parentheses, and dashes - don't include email addresses
if(str_detect(number, "[[:space:]-\\(\\)]") & !str_detect(number, "[[:alpha:]]")) {
number_formatted <- str_replace_all(number, "[[:space:]-\\(\\)]", "")
}
# Remove +1 from US numbers
# check area codes don't start with a 0 or 1 in filter
if(str_detect(number, "^\\+1[2-9]") & nchar(number) == 12  & is.null(number_formatted)) {
number_formatted <- str_replace(number, "^\\+1", "")
}
# check formatted numbers
if (!is.null(number_formatted)) {
if(str_detect(number_formatted, "^\\+1[2-9]") & nchar(number_formatted) == 12) {
number_formatted <- str_replace(number_formatted, "^\\+1", "")
}
}
# remove 1 from US numbers with no +
if(str_detect(number, "^1[2-9]") & nchar(number) == 11 & is.null(number_formatted)) {
number_formatted <- str_replace(number, "^1", "")
}
# check formatted numbers
if (!is.null(number_formatted)) {
if(str_detect(number_formatted, "^1[2-9]") & nchar(number_formatted) == 11) {
number_formatted <- str_replace(number_formatted, "^1", "")
}
}
# remove + from US numbers (with no 1 or +1)
if(str_detect(number, "^\\+[2-9]") & nchar(number) == 11 & is.null(number_formatted)) {
number_formatted <- str_replace(number, "^\\+", "")
}
# check formatted numbers
if (!is.null(number_formatted)) {
if(str_detect(number_formatted, "^\\+[2-9]") & nchar(number_formatted) == 11) {
number_formatted <- str_replace(number_formatted,  "^\\+", "")
}
}
if(!is.null(number_formatted)) {
return(number_formatted)
}
}
return(as.character(NA))
}
logs$address_clean <- map(logs$address, kendra_cln_number)
logs <- logs %>%
mutate(address_clean = unlist(address_clean)) %>%
glimpse()
logs %>%
filter(is.na(address)) %>%
kbl() %>%
kable_styling() %>%
scroll_box(width = "100%")
logs %>%
filter(str_detect(logs$address, "[[:space:]-\\(\\)]")) %>%
select(address, address_clean) %>%
print(n = Inf)
logs %>%
filter(str_detect(address, "~")) %>%
count(address) %>%
print(n = Inf)
kendra_cln_number <- function(number) {
# I am thinking we should return the clean numbers as a new variable and then
# we can easily see which numbers were not caught/formatted by looking at
# missing values in formatted column.
# Can use function with following code:
# logs$address_clean <- map(logs$address, kendra_cln_number)
# logs <- logs %>%
#   mutate(address_clean = unlist(address_clean)) %>%
#   glimpse()
number_formatted <- NULL
if(!is.na(number)) {
# Remove spaces, parentheses, and dashes
# exlude numbers with alphabetic characters from cleaning spaces and dashes
if(str_detect(number, "[[:space:]-\\(\\)]") & !str_detect(number, "[[:alpha:]]")) {
number_formatted <- str_replace_all(number, "[[:space:]-\\(\\)]", "")
}
# Remove +1 from US numbers
# check area codes don't start with a 0 or 1 in filter
if(str_detect(number, "^\\+1[2-9]") & nchar(number) == 12  & is.null(number_formatted)) {
number_formatted <- str_replace(number, "^\\+1", "")
}
# check formatted numbers
if (!is.null(number_formatted)) {
if(str_detect(number_formatted, "^\\+1[2-9]") & nchar(number_formatted) == 12) {
number_formatted <- str_replace(number_formatted, "^\\+1", "")
}
}
# remove 1 from US numbers with no +
if(str_detect(number, "^1[2-9]") & nchar(number) == 11 & is.null(number_formatted)) {
number_formatted <- str_replace(number, "^1", "")
}
# check formatted numbers
if (!is.null(number_formatted)) {
if(str_detect(number_formatted, "^1[2-9]") & nchar(number_formatted) == 11) {
number_formatted <- str_replace(number_formatted, "^1", "")
}
}
# remove + from US numbers (with no 1 or +1)
if(str_detect(number, "^\\+[2-9]") & nchar(number) == 11 & is.null(number_formatted)) {
number_formatted <- str_replace(number, "^\\+", "")
}
# check formatted numbers
if (!is.null(number_formatted)) {
if(str_detect(number_formatted, "^\\+[2-9]") & nchar(number_formatted) == 11) {
number_formatted <- str_replace(number_formatted,  "^\\+", "")
}
}
# move all numbers already in proper format to formatted_numbers variable
if(str_detect(number, "^[2-9]") & nchar(number == 10)) {
number_formatted <- number
}
if(!is.null(number_formatted)) {
return(number_formatted)
}
}
return(as.character(NA))
}
# Chunk 1
pre, code {
max-height: 500px;
overflow-y: auto;
white-space: pre !important;
overflow-x: auto
}
# Chunk 2
path_in <- "Z:/studydata/risk/analysis/shared/data"
path_out <- "Z:/studydata/risk/analysis/meta/data"
# Chunk 3
library(tidyverse)
library(kableExtra)
library(lubridate)
source("C:/Users/kpaquette2/lab_support/fun_phone_numbers.R")
# Chunk 4
logs <- read_csv(file.path(path_in, "sms_android.csv"), col_types = cols()) %>%
glimpse()
# Chunk 5
logs %>%
group_by(subid) %>%
slice(1) %>%
select(subid) %>%
print(n = Inf)
# Chunk 6
logs <- logs %>%
mutate(subid = as.numeric(subid)) %>%
glimpse()
# Chunk 7
logs %>%
arrange(date)
# Chunk 8
logs %>%
filter(log_file == "128_SMS_1.xml") %>%
arrange(date)
# Chunk 9
logs <- logs %>%
mutate(date = case_when(subid == 128 & address == "+16087127555" & date(date) == "1970-01-01" ~ as_datetime(NA),
TRUE ~ date))
# Chunk 10
logs %>%
filter(is.na(date))
# Chunk 11
logs <- logs %>%
filter(!is.na(date))
# Chunk 12
logs %>%
naniar::miss_var_summary()
# Chunk 13
logs <- logs %>%
select(-message) %>%
glimpse()
# Chunk 14
logs %>%
janitor::tabyl(type)
# Chunk 15
logs %>%
filter(type == 19) %>%
select(subid, address, body)
# Chunk 16
logs %>%
filter(str_detect(address, "alert") | str_detect(address, "Alert") | str_detect(address, "Amber")) %>%
select(address, contact_name, type) %>%
print(n = Inf)
# Chunk 17
logs <- logs %>%
mutate(type = case_when(type == 19 ~ 1,
TRUE ~ type))
# Chunk 18
logs %>%
filter(type == -1) %>%
count(contact_name) %>%
print(n = Inf)
# Chunk 19
logs %>%
filter(str_detect(address, "~")) %>%
count(type)
# Chunk 20
logs %>%
filter(!type %in% c(1:5, NA)) %>%
count(subid)
# Chunk 21
logs %>%
filter(str_detect(address, "~")) %>%
count(subid)
# Chunk 22
logs <- logs %>%
mutate(type = case_when(type == -1 ~ as.numeric(NA),
TRUE ~ type))
logs %>%
janitor::tabyl(type)
# Chunk 23
logs %>%
filter(type == 3)
# Chunk 24
logs %>%
janitor::tabyl(status)
# Chunk 25
logs %>%
filter(status == 64) %>%
count(type)
# Chunk 26
logs %>%
filter(type == 5) %>%
count(status)
# Chunk 27
logs %>%
janitor::tabyl(read)
# Chunk 28
logs %>%
filter(read == 0) %>%
count(type)
# Chunk 29
logs %>%
janitor::tabyl(locked)
# Chunk 30
logs %>%
filter(locked == 1) %>%
count(subid) %>%
arrange(desc(n))
# Chunk 31
logs %>%
janitor::tabyl(protocol)
# Chunk 32
logs %>%
filter(protocol == 57 | protocol == 95)
# Chunk 33
logs <- logs %>%
select(-protocol) %>%
glimpse()
# Chunk 34
logs %>%
count(subject == "null")
logs %>%
filter(subject != "null") %>%
select(subject) %>%
print(n = Inf)
# Chunk 35
logs %>%
filter(subject != "null") %>%
count(subid)
# Chunk 36
logs %>%
filter(subject != "null") %>%
select(address, contact_name, body)
# Chunk 37
logs <- logs %>%
select(-subject)
# Chunk 38
logs %>%
janitor::tabyl(toa)
logs %>%
janitor::tabyl(sc_toa)
# Chunk 39
logs <- logs %>%
select(-c(toa, sc_toa)) %>%
glimpse()
# Chunk 40
logs %>%
janitor::tabyl(service_center)
# Chunk 41
logs %>%
filter(type == 2) %>%
count(service_center)
# Chunk 42
logs %>%
filter(service_center == "null") %>%
count(type)
# Chunk 43
logs <- logs %>%
select(-service_center) %>%
glimpse()
# Chunk 44
logs %>%
select(body) %>%
slice_sample(n = 50) %>%
print(n = Inf)
# Chunk 45
logs %>%
filter(str_detect(address, "~")) %>%
select(body) %>% print(n = Inf)
# Chunk 46
logs %>%
filter(str_detect(body, "SurveySignal")) %>%
select(address, contact_name, body) %>%
print(n = Inf)
# Chunk 47
logs <- logs %>%
filter(!str_detect(body, "SurveySignal") | is.na(body))
# Chunk 48
logs %>%
count(date_sent == 0)
logs %>%
filter(date_sent != 0) %>%
count(type)
logs %>%
filter(date_sent == 0) %>%
count(type)
# Chunk 49
logs %>%
group_by(contact_name) %>%
slice(1) %>%
select(contact_name) %>%
print(n = Inf)
logs$address_clean <- map(logs$address, kendra_cln_number)
logs <- logs %>%
mutate(address_clean = unlist(address_clean)) %>%
glimpse()
logs %>%
filter(is.na(address)) %>%
kbl() %>%
kable_styling() %>%
scroll_box(width = "100%")
logs %>%
filter(str_detect(logs$address, "[[:space:]-\\(\\)]")) %>%
select(address, address_clean) %>%
print(n = Inf)
logs %>%
filter(is.na(address_clean)) %>%
select(address, address_clean) %>%
print(n = Inf)
