---
title: "Evaluate models' performance in held out outer folds for `r params$window` and lead = `r params$lead` and `r params$version`"
author: "John Curtin & Kendra Wyant"
date: "`r lubridate::today()`"
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
params:
  study: "ema"
  cv: "nested"
  window: "1hour"
  lead: 0
  version: "v5"
editor_options: 
  chunk_output_type: console
---

### Code Status

In use with iterative improvement

### Notes
This is a generic script that reproduces the CV metrics for the best model configuration, calculates various performance metrics from that resampling, makes plots, and then fits the best config to the final sample to do feature importance.

This script is called by various studies, passing in the data_type, window, lead, and version.


### Set Up Environment

```{r}
study <- params$study
cv <- params$cv
window <- params$window
lead <- params$lead 
version <- params$version
```

Function conflicts
```{r, packages_workflow}
#| message: false
#| warning: false

# source
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")

# handle conflicts
options(conflicts.policy = "depends.ok")
tidymodels_conflictRules()
```

Packages for script
```{r, packages_script}
#| message: false
#| warning: false

library(tidyverse)
library(tidymodels)
library(tidyposterior)

# library(SHAPforxgboost)
# library(rstanarm)

theme_set(theme_classic()) 
```

Source support functions
```{r source_functions}
# EDA
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")

# CHTC support functions
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/chtc/static_files/fun_chtc.R?raw=true")
```


Absolute paths
```{r, absolute_paths}
switch (Sys.info()[['sysname']],
        # PC paths
        Windows = {
          path_input <- str_c("P:/studydata/risk/chtc/", study)
          path_processed <- str_c("P:/studydata/risk/data_processed/", study)
          path_models <- str_c("P:/studydata/risk/models/", study)},

        # IOS paths
        Darwin = {
          path_input <- str_c("/Volumes/private/studydata/risk/chtc/", study)
          path_processed <- str_c("/Volumes/private/studydata/risk/data_processed/",
                                  study)
          path_models <- str_c("/Volumes/private/studydata/risk/models/", study)},
        
        # Linux paths
        Linux = {
          path_input <- str_c("~/mnt/private/studydata/risk/chtc/", study)
          path_processed <- str_c("~/mnt/private/studydata/risk/data_processed/",
                                  study)
          path_models <- str_c("~/mnt/private/studydata/risk/models/", study)}
        )
```


Chunk Defaults
```{r defaults}
#| include: false

knitr::opts_chunk$set(attr.output='style="max-height: 500px;"')

options(tibble.width = Inf)
options(tibble.print_max = Inf)
```


Source training controls 
```{r source}
# EDA
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")

# CHTC support functions
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/chtc/static_files/fun_chtc.R?raw=true")

# ML functions
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")

```

### Model Performance Metrics

```{r read_metrics_preds}
preds_out <- readRDS(file.path(path_models, str_c("outer_preds_", window, "_", 
                                                    lead, "_", version, "_", 
                                                    cv, ".rds")))
metrics_out <- readRDS(file.path(path_models, str_c("outer_metrics_", window, "_", 
                                                      lead, "_", version, "_", 
                                                      cv, ".rds")))
```

#### Outer AUC


Review performance across all inner folds
```{r metrics_in}
metrics_out |> 
  summarize(median(roc_auc_in), mean(roc_auc_in))
```


And now across outer folds
Outer overall
```{r metrics_out}
metrics_out |> 
  summarize(median(roc_auc), mean(roc_auc))
```

Plot outer folds
```{r plot_outer}
metrics_out |> 
  ggplot(aes(x = roc_auc)) +
  geom_histogram(bins = 10)
```

Table for each outer fold
```{r metrics_out_kbl}
metrics_out |> 
  print_kbl()
```


#### ROC curve
This is single ROC by concatenating all outer folds.
Could consider reporting this AUC though likely average of outer fold AUCs is more appropriate?
Could also plot ROC by fold but maybe too confusing?
```{r roc_info}
preds_out %>%
  roc_auc(prob, truth = label)

roc_data <- preds_out %>% 
  roc_curve(prob, truth = label)
  
roc_data %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 3) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Specificity",
       y = "Sensitivity") +
  scale_x_continuous(breaks = seq(0,1,.25),
    labels = sprintf("%.2f", seq(1,0,-.25))) +
  theme(axis.text = element_text(size = rel(1.50)), 
        axis.title = element_text(size = rel(1.75)))

# save plot for presentations
# ggsave(file.choose(), width = 6.5, height = 6.5, units = "in", device = "png",  dpi = 100)
```

#### Posterior probabibilites for AUC

```{r}
resamples <- metrics_out |> 
  mutate(id = rep(str_c("repeat", 1:3), each = 10),
         id2 = rep(str_c("fold", 1:10),3)) |>   # assumes 3x10 fold
  select(id, id2, roc_auc) %>% 
  print(n = 5)
```

```{r}
resamples %>% 
  ggplot() + 
  geom_histogram(aes(x = roc_auc), bins = 10)
```


```{r}
set.seed(101)
pp <- resamples %>% 
  perf_mod(formula = statistic ~ 1 + (1 | id2/id),
           iter = 5000, chains = 4,  
           transform = tidyposterior::logit_trans,  # for skewed & bounded AUC
           family = gaussian, 
           adapt_delta = .9999)  

pp %>%  saveRDS(file.path(path_models, str_c("posteriors_", window, "_", lead, "_", 
                                             version, "_", cv, ".rds")))
```

```{r}
# get shinystan package
# launch_shinystan(pp$stan)
pp$stan

rstanarm::prior_summary(pp$stan)
```


```{r}
pp %>% 
  tidy(seed = 123) %>% 
  ggplot() + 
  geom_density(aes(x = posterior))
```

#### Probability Histograms
Histograms with free Y
```{r prob_plot_free}
preds_out %>% 
  ggplot(data = ., aes(x = prob)) + 
   geom_histogram(bins = 15, fill = "white", col = "black") +
   facet_wrap(~label, nrow = 2, scales = "free_y") +
   xlab("Pr(Lapse)") +
  theme(axis.text = element_text(size = rel(1.00)), 
        axis.title.x = element_text(size = rel(1.25)),
        strip.text = element_text(size = rel(1.75)))

# save plot for presentations
# ggsave(file.choose(), width = 6.5, height = 6.5, units = "in", device = "png",  dpi = 100)
```

Histograms with fixed Y
```{r prob_plot_fixed}
preds_out %>% 
  ggplot(data = ., aes(x = prob)) + 
   geom_histogram(bins = 15, fill = "white", col = "black") +
   facet_wrap(~label, nrow = 2) +
   xlab("Pr(Lapse)") +
  theme(axis.text = element_text(size = rel(1.00)), 
        axis.title.x = element_text(size = rel(1.25)),
        strip.text = element_text(size = rel(1.75)))

# save plot for presentations
# ggsave(file.choose(), width = 6.5, height = 6.5, units = "in", device = "png",  dpi = 100)
```


#### Outer individual metrics

Confusion matrix using .5 threshold
```{r default_cm}
preds_out <- preds_out |> 
   mutate(estimate = if_else(prob > .5, "Lapse", "No lapse"),
          estimate = factor(estimate, levels = c("Lapse", "No lapse"))) 

(cm <- preds_out |> 
   conf_mat(truth = label, estimate = estimate))

cm %>% 
  autoplot() +
  theme(axis.text = element_text(size = rel(1.50)), 
        axis.title = element_text(size = rel(1.75)))

cm %>% summary()

# save plot for presentations
# ggsave(file.choose(), width = 7.5, height = 6.5, units = "in", device = "png",  dpi = 100)
```


#### PR Curve
Here is precision/recall by concatenating all folds
Same approach as above for ROC
```{r pr_info}
preds_out %>%
  pr_auc(prob, truth = label)

pr_data <- preds_out %>% 
  pr_curve(prob, truth = label)

pr_data %>% 
  ggplot(aes(x = recall, y = precision)) +
  geom_path() +
  geom_hline(lty = 3, yintercept = mean(preds_out$label == "Lapse")) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Recall (Sensitivity)",
       y = "Precision (PPV)")

# save plot for presentations
# ggsave(file.choose(), width = 6.5, height = 6.5, units = "in", device = "png",  dpi = 100)
```


### Feature Importance

#### Grouped Features

```{r read_shaps_grp}
shaps_out_grp <- readRDS(file.path(path_models, str_c("outer_shaps_grp_", 
                                                        window, "_", lead, "_", 
                                                        version, "_", cv, ".rds")))
```


Global importance SHAP plot for grouped features
```{r shap_grouped_plot}
shaps_out_grp %>% 
  group_by(group) %>% 
  summarize(mean_value = mean(abs(shap)), .groups = "drop") %>% 
  arrange(mean_value) %>% 
  mutate(group = factor(group),
         group = fct_inorder(group)) %>% 
  ggplot(mapping = aes(x = group, y = mean_value)) +
  geom_point(size = 2, color = "red") +
  geom_segment(aes(x = group, y = mean_value, xend = group), 
               yend = 0, colour = "grey50")  +
  ylab("Mean |SHAP| value") +
  coord_flip()

# save plot for presentations
# ggsave(file.choose(), width = 6.5, height = 6.5, units = "in", device = "png",  dpi = 100)

# shaps <- shap.values(xgb_model = extract_fit_engine(model_fit_best),
#                      X_train = x %>% as.matrix())

 
# shap.plot.summary.wrap1(extract_fit_engine(model_fit_best), x %>% as.matrix(), 
#                         top_n = 20, dilute = 10)
```


#### Raw Features

```{r read_shaps_raw}
shaps_out <- readRDS(file.path(path_models, str_c("outer_shaps_", window, "_", 
                                                    lead, "_", version, "_", 
                                                    cv, ".rds")))
```


Global importance SHAP plot for raw features
```{r shap_raw_plot}
shaps_out %>% 
  group_by(variable) %>% 
  slice(1) %>%   # mean for each variable is same for all rows for that variable
  ungroup() %>% 
  arrange(mean_value) %>% 
  slice_tail(n = 50) %>%
  mutate(variable = factor(variable),
         variable = forcats::fct_inorder(variable)) %>% 
  ggplot(mapping = aes(x = variable, y = mean_value)) +
  geom_point(size = 2, color = "red") +
  geom_segment(aes(x = variable, y = mean_value, xend = variable), 
               yend = 0, colour = "grey50")  +
  ylab("Mean |SHAP| value") +
  coord_flip()

# save plot for presentations
# ggsave(file.choose(), width = 6.5, height = 6.5, units = "in", device = "png",  dpi = 100)
```

